modelo_svm = svm(class ~., dados_teste)
library(e1071)
modelo_svm = svm(class ~., dados_teste)
dados_teste = dados_creditos[amostras==2,]
dados_creditos = read.csv(file.choose())
dados_teste = dados_creditos[amostras==2,]
#install.packages("e1071")
library(e1071)
dados_creditos = read.csv(file.choose())
head(dados_creditos)
amostras = sample(2, 1000, replace = T, prob = c(0.7,0.3))
amostras
dados_treino = dados_creditos[amostras==1,]
dados_teste = dados_creditos[amostras==2,]
modelo = naiveBayes(class ~., dados_treino)
modelo
previsao = predict(modelo, dados_teste)
previsao
matriz_confusao = table(dados_teste$class, previsao)
matriz_confusao
#taxa de acerto
taxa = (matriz_confusao[1]+matriz_confusao[4])/sum(matriz_confusao)
taxa
novos_dados = read.csv(file.choose())
previsao_deployment = predict(modelo, novos_dados)
previsao_deployment
library(e1071)
modelo_svm = svm(class ~., dados_teste)
modelo_svm
modelo_svm = svm(class ~., dados_treino)
modelo_svm
modelo_svm = svm(class ~., dados_treino)
modelo_svm
previsao_svm = predict(modelo_svm, dados_teste)
previsao_svm
m_confusao_svm = table(dados_creditos$class, previsao_svm)
m_confusao_svm = table(dados_teste$class, previsao_svm)
taxa_good = (m_confusao_svm[1] + m_confusao_svm[4])/sum(m_confusao_svm)
taxa_good
install.packages("Fselector")
install.packages("FSelector")
library(FSelector)
random.forest.importance(class ~., dados_creditos)
previsao_atributos = predict(modelo_atributos, dados_teste)
modelo_atributos = svm(class ~ checking_status + duration + credit_history, dados_treino)
previsao_atributos = predict(modelo_atributos, dados_teste)
m_confusao_svm_att = table(dados_teste$class, previsao_atributos)
m_confusao_svm_att
taxa_good_att = (m_confusao_svm_att[1] + m_confusao_svm_att[4])/sum(m_confusao_svm_att)
taxa_good_att
knit_with_parameters('~/GitHub/MachineLearning/Analise-de-Credito/analise.Rmd')
knit_with_parameters('~/GitHub/MachineLearning/Analise-de-Credito/analise.Rmd')
